#+TITLE: Web Interface Agent Instructions
#+DATE: 2025-09-13
#+STARTUP: overview

* Your Mission

You are the Web Interface agent working on the Guile ChangeFlow system.

Your worktree: /home/dsp-dr/ghq/github.com/dsp-dr/gcf-web-interface
Your branch: feat/web-interface
Your focus: Web dashboard and API for viewing changes

* Priority Tasks

1. Create HTTP server on port 8080
2. Implement /api/changes endpoint (returns JSON)
3. Create dashboard HTML page
4. Add /health endpoint
5. Display changes with risk scores and colors

* File Structure to Create

#+begin_example
src/
â”œâ”€â”€ web/
â”‚   â”œâ”€â”€ server.scm       # Main HTTP server
â”‚   â”œâ”€â”€ api.scm          # API endpoints
â”‚   â”œâ”€â”€ dashboard.scm    # HTML generation
â”‚   â””â”€â”€ static.scm       # Static assets
â”œâ”€â”€ templates/
â”‚   â””â”€â”€ dashboard.html   # Dashboard template
â””â”€â”€ main.scm            # Entry point
#+end_example

* Critical Deliverables (MUST HAVE for Demo)

- [ ] Server responds on http://localhost:8080
- [ ] Dashboard shows list of changes
- [ ] Risk scores shown with colors (green/yellow/red)
- [ ] /api/changes returns JSON
- [ ] Auto-refresh every 5 seconds

* Code Template to Start With

** src/web/server.scm
#+begin_src scheme
(define-module (web server)
  #:use-module (web server)
  #:use-module (web request)
  #:use-module (web response)
  #:use-module (web uri)
  #:use-module (json)
  #:use-module (web api)
  #:use-module (web dashboard)
  #:export (start-web-server))

(define (handler request body)
  (let ((path (uri-path (request-uri request))))
    (cond
      ((string=? path "/")
       (dashboard-handler))
      ((string=? path "/health")
       (health-handler))
      ((string=? path "/api/changes")
       (api-changes-handler))
      ((string-prefix? "/api/" path)
       (api-handler request body))
      (else
       (not-found-handler)))))

(define (health-handler)
  (values '((content-type . (application/json)))
          "{\"status\":\"healthy\",\"service\":\"web-interface\"}"))

(define (start-web-server)
  (display "Starting web server on port 8080...\n")
  (run-server handler 'http '(#:port 8080)))
#+end_src

** src/web/api.scm
#+begin_src scheme
(define-module (web api)
  #:use-module (storage memory)
  #:use-module (risk categories)
  #:use-module (json)
  #:use-module (web response)
  #:export (api-changes-handler))

(define (api-changes-handler)
  "Return all changes as JSON"
  (let* ((changes (get-all-changes))
         (changes-list
          (map (lambda (change)
                 `((id . ,(change-request-id change))
                   (title . ,(change-request-title change))
                   (description . ,(change-request-description change))
                   (riskScore . ,(change-request-risk-score change))
                   (riskCategory . ,(symbol->string (categorize-risk (change-request-risk-score change))))
                   (status . ,(symbol->string (change-request-status change)))
                   (createdAt . ,(date->string (time-utc->date (change-request-created-at change))))))
               changes)))

    (values '((content-type . (application/json))
              (access-control-allow-origin . "*"))
            (scm->json-string `((changes . ,changes-list))))))
#+end_src

** src/web/dashboard.scm
#+begin_src scheme
(define-module (web dashboard)
  #:use-module (storage memory)
  #:use-module (risk categories)
  #:use-module (web response)
  #:export (dashboard-handler))

(define (dashboard-handler)
  "Generate HTML dashboard"
  (let ((html-content
         (string-append
          "<!DOCTYPE html>
<html>
<head>
    <title>ChangeFlow Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        h1 { color: #333; }
        .container { max-width: 1200px; margin: 0 auto; }
        .stats { display: flex; gap: 20px; margin-bottom: 30px; }
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            flex: 1;
        }
        .stat-value { font-size: 36px; font-weight: bold; }
        .stat-label { color: #666; margin-top: 5px; }
        table { width: 100%; background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        th { background: #4CAF50; color: white; padding: 12px; text-align: left; }
        td { padding: 12px; border-bottom: 1px solid #ddd; }
        .risk-low { color: green; font-weight: bold; }
        .risk-medium { color: orange; font-weight: bold; }
        .risk-high { color: red; font-weight: bold; }
        .risk-critical { color: darkred; font-weight: bold; }
        .status { padding: 4px 8px; border-radius: 4px; font-size: 12px; }
        .status-submitted { background: #e3f2fd; color: #1976d2; }
        .status-approved { background: #e8f5e9; color: #388e3c; }
        .status-rejected { background: #ffebee; color: #c62828; }
        .refresh { margin: 20px 0; color: #666; }
    </style>
    <meta http-equiv=\"refresh\" content=\"5\">
</head>
<body>
    <div class=\"container\">
        <h1>ðŸ”„ ChangeFlow Dashboard</h1>
        <div class=\"stats\">
            <div class=\"stat-card\">
                <div class=\"stat-value\" id=\"total-changes\">0</div>
                <div class=\"stat-label\">Total Changes</div>
            </div>
            <div class=\"stat-card\">
                <div class=\"stat-value\" id=\"pending-changes\">0</div>
                <div class=\"stat-label\">Pending Approval</div>
            </div>
            <div class=\"stat-card\">
                <div class=\"stat-value\" id=\"high-risk\">0</div>
                <div class=\"stat-label\">High Risk</div>
            </div>
        </div>
        <table id=\"changes-table\">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Title</th>
                    <th>Risk Score</th>
                    <th>Category</th>
                    <th>Status</th>
                    <th>Created</th>
                </tr>
            </thead>
            <tbody id=\"changes-body\">
                <!-- Changes will be loaded here -->
            </tbody>
        </table>
        <div class=\"refresh\">Auto-refreshing every 5 seconds...</div>
    </div>

    <script>
        async function loadChanges() {
            try {
                const response = await fetch('/api/changes');
                const data = await response.json();
                const tbody = document.getElementById('changes-body');
                const changes = data.changes || [];

                // Update stats
                document.getElementById('total-changes').textContent = changes.length;
                document.getElementById('pending-changes').textContent =
                    changes.filter(c => c.status === 'submitted' || c.status === 'assessing').length;
                document.getElementById('high-risk').textContent =
                    changes.filter(c => c.riskScore > 70).length;

                // Update table
                tbody.innerHTML = changes.map(change => `
                    <tr>
                        <td>${change.id}</td>
                        <td>${change.title}</td>
                        <td>${change.riskScore}</td>
                        <td class=\"risk-${change.riskCategory}\">${change.riskCategory.toUpperCase()}</td>
                        <td><span class=\"status status-${change.status}\">${change.status.toUpperCase()}</span></td>
                        <td>${change.createdAt || 'Just now'}</td>
                    </tr>
                `).join('');

                if (changes.length === 0) {
                    tbody.innerHTML = '<tr><td colspan=\"6\" style=\"text-align: center; color: #999;\">No changes yet. Create one using the MCP tools!</td></tr>';
                }
            } catch (error) {
                console.error('Failed to load changes:', error);
            }
        }

        // Load immediately and then every 5 seconds
        loadChanges();
        setInterval(loadChanges, 5000);
    </script>
</body>
</html>")))

    (values '((content-type . (text/html)))
            html-content)))
#+end_src

* Integration Points

- Import models from Agent 1 (Core Models)
- Import risk categories from Agent 3 (Risk Engine)
- Display changes created by Agent 2 (MCP Server)
- Show notifications from Agent 5 (Integrations)

* Testing Your Work

#+begin_src bash
# Test health endpoint
curl http://localhost:8080/health

# Test API
curl http://localhost:8080/api/changes | jq .

# View dashboard
open http://localhost:8080

# Or check HTML
curl http://localhost:8080 | grep "ChangeFlow Dashboard"
#+end_src

* Timeline

- Hour 1: Basic HTTP server
- Hour 2: API endpoints
- Hour 3: Dashboard HTML
- Hour 4: Styling and auto-refresh
- Hour 5: Ready for demo

* Notes

- Simple HTML is fine - no framework needed
- Auto-refresh keeps it "live" for demo
- Use colors to make risk obvious
- Show "No changes" message initially
- Focus on making it look good for screenshots