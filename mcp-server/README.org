#+TITLE: ChangeFlow MCP Server
#+STARTUP: overview

* Architecture Vision

This MCP server demonstrates ITIL 4 change management workflows through the Model Context Protocol.

** Client Integrations
- Claude Desktop - Native MCP client
- Claude Code - Development environment
- claude.ai - Web-based Claude
- Emacs mcp.el - Emacs integration
- [[https://github.com/modelcontextprotocol/inspector][MCP Inspector]] - Protocol debugging

* Features

** Core MCP Protocol
- 8 ITIL-compliant tools via JSON-RPC 2.0
- Risk assessment with mock/random data
- Change request lifecycle management
- Freeze period enforcement
- Emergency change procedures

** OAuth Integration
- GitHub OAuth flow for authentication
- System integration demonstration
- User context preservation

** Web Endpoints
- Health checks and status
- OAuth configuration endpoints
- Integration testing interfaces

* Deployment

#+BEGIN_SRC bash
# Deploy to Cloudflare Workers
cd mcp-server
wrangler publish

# Local testing
wrangler dev
#+END_SRC

* Client Configuration

** Claude Desktop
#+BEGIN_SRC json
{
  "mcpServers": {
    "changeflow": {
      "command": "curl",
      "args": ["-X", "POST", "https://api.changeflow.us/", "-H", "Content-Type: application/json"]
    }
  }
}
#+END_SRC

** MCP Inspector
#+BEGIN_SRC bash
# Install MCP Inspector
npm install -g @modelcontextprotocol/inspector

# Connect to ChangeFlow
mcp-inspector https://api.changeflow.us/
#+END_SRC

* Mock Data Strategy

The server uses intelligent mock data to demonstrate workflows:
- Realistic change request scenarios
- Dynamic risk calculations
- Simulated approval workflows
- Time-based freeze periods

* Development vs Production

| Environment | Location                     | Purpose                        |
|-------------+------------------------------+--------------------------------|
| Local       | scripts/mcp-local-server.js  | MCP protocol testing           |
| Cloudflare  | mcp-server/                  | Full workflow with OAuth       |
| Scheme      | src/                         | ITIL algorithms and research   |

* OAuth Flow

1. Client initiates OAuth with GitHub
2. Server handles callback and token exchange
3. User context maintained for subsequent MCP calls
4. Integration demonstrated with real GitHub data

This shows how MCP integrates with existing systems across the protocol boundary.