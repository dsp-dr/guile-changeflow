#+TITLE: Guile ChangeFlow - Deployment Configuration Templates
#+AUTHOR: defrecord.com
#+DATE: [2025-09-13 Fri]
#+STARTUP: overview
#+PROPERTY: header-args :mkdirp yes :results silent

* Overview

This document contains deployment configuration templates for Guile ChangeFlow. All configurations are maintained in org-mode on the main branch, with actual implementations in feature branches/worktrees.

* Workflow Structure

#+begin_src mermaid :file deployment-workflow.png
graph LR
    subgraph "Main Branch"
        A[setup.org]
        B[deployment.org]
        C[design docs]
        D[requirements]
    end
    
    subgraph "Worktrees"
        E[feature/core-implementation]
        F[feature/mcp-protocol]
        G[feature/integrations]
        H[release/v1.0]
    end
    
    subgraph "Deployment Targets"
        I[Development]
        J[Staging]
        K[Production]
    end
    
    A --> E & F & G
    B --> H
    H --> I & J & K
    
    style A fill:#ff9,stroke:#333,stroke-width:2px
    style B fill:#ff9,stroke:#333,stroke-width:2px
    style H fill:#9ff,stroke:#333,stroke-width:2px
#+end_src

* Environment Configuration

** Development Environment
:PROPERTIES:
:ID: dev-env
:END:

#+NAME: dev-config
#+begin_src scheme :tangle dev/config.scm :mkdirp yes
;;; Development Configuration
;;; NOTE: This file is tangled from deployment.org in main branch

(define-module (changeflow config dev)
  #:export (config))

(define config
  `((server
     (host . "127.0.0.1")
     (port . 8080)
     (workers . 2))
    
    (mcp
     (base-url . "http://localhost:8080/mcp/")
     (auth-url . "http://localhost:8080/oauth/")
     (debug . #t))
    
    (database
     (type . sqlite)
     (path . "/tmp/changeflow-dev.db")
     (pool-size . 5))
    
    (cache
     (type . memory)
     (ttl . 300))
    
    (integrations
     (github
      (webhook-secret . ,(getenv "GITHUB_WEBHOOK_SECRET_DEV"))
      (api-token . ,(getenv "GITHUB_TOKEN_DEV")))
     
     (calendar
      (enabled . #f))
     
     (slack
      (enabled . #f)))
    
    (logging
     (level . debug)
     (output . stdout)
     (format . human-readable))))
#+end_src

** Staging Environment
:PROPERTIES:
:ID: staging-env
:END:

#+NAME: staging-config
#+begin_src scheme :tangle staging/config.scm :mkdirp yes
;;; Staging Configuration
;;; NOTE: This file is tangled from deployment.org in main branch

(define-module (changeflow config staging)
  #:export (config))

(define config
  `((server
     (host . "0.0.0.0")
     (port . 8080)
     (workers . 4)
     (behind-proxy . #t))
    
    (mcp
     (base-url . "https://staging.changeflow.example.com/mcp/")
     (auth-url . "https://auth-staging.changeflow.example.com/oauth/")
     (debug . #f))
    
    (database
     (type . postgresql)
     (host . "db-staging.internal")
     (port . 5432)
     (name . "changeflow_staging")
     (user . ,(getenv "DB_USER"))
     (password . ,(getenv "DB_PASSWORD"))
     (pool-size . 20)
     (ssl . require))
    
    (cache
     (type . redis)
     (host . "redis-staging.internal")
     (port . 6379)
     (ttl . 3600)
     (namespace . "changeflow:staging"))
    
    (integrations
     (github
      (webhook-secret . ,(getenv "GITHUB_WEBHOOK_SECRET"))
      (api-token . ,(getenv "GITHUB_TOKEN"))
      (app-id . ,(getenv "GITHUB_APP_ID")))
     
     (calendar
      (enabled . #t)
      (oauth-client-id . ,(getenv "GOOGLE_CLIENT_ID"))
      (oauth-client-secret . ,(getenv "GOOGLE_CLIENT_SECRET")))
     
     (slack
      (enabled . #t)
      (webhook-url . ,(getenv "SLACK_WEBHOOK_URL"))))
    
    (logging
     (level . info)
     (output . syslog)
     (format . json))))
#+end_src

** Production Environment
:PROPERTIES:
:ID: prod-env
:END:

#+NAME: prod-config
#+begin_src scheme :tangle production/config.scm :mkdirp yes
;;; Production Configuration
;;; NOTE: This file is tangled from deployment.org in main branch

(define-module (changeflow config production)
  #:export (config))

(define config
  `((server
     (host . "0.0.0.0")
     (port . 8080)
     (workers . ,(string->number (or (getenv "WORKER_COUNT") "8")))
     (behind-proxy . #t)
     (trusted-proxies . ("10.0.0.0/8")))
    
    (mcp
     (base-url . "https://api.changeflow.io/mcp/")
     (auth-url . "https://auth.changeflow.io/oauth/")
     (debug . #f)
     (rate-limit . ((requests-per-minute . 60)
                   (burst . 100))))
    
    (database
     (type . postgresql)
     (host . ,(getenv "DB_HOST"))
     (port . ,(string->number (or (getenv "DB_PORT") "5432")))
     (name . ,(getenv "DB_NAME"))
     (user . ,(getenv "DB_USER"))
     (password . ,(getenv "DB_PASSWORD"))
     (pool-size . 50)
     (ssl . require)
     (statement-timeout . 30000))
    
    (cache
     (type . redis-cluster)
     (nodes . ,(string-split (getenv "REDIS_NODES") #\,))
     (ttl . 7200)
     (namespace . "changeflow:prod")
     (password . ,(getenv "REDIS_PASSWORD")))
    
    (integrations
     (github
      (webhook-secret . ,(getenv "GITHUB_WEBHOOK_SECRET"))
      (app-id . ,(getenv "GITHUB_APP_ID"))
      (private-key-path . "/secrets/github-app.pem"))
     
     (calendar
      (enabled . #t)
      (oauth-client-id . ,(getenv "GOOGLE_CLIENT_ID"))
      (oauth-client-secret . ,(getenv "GOOGLE_CLIENT_SECRET"))
      (service-account-path . "/secrets/google-service-account.json"))
     
     (slack
      (enabled . #t)
      (app-token . ,(getenv "SLACK_APP_TOKEN"))
      (signing-secret . ,(getenv "SLACK_SIGNING_SECRET"))))
    
    (security
     (cors-origins . ("https://claude.ai" 
                     "https://*.anthropic.com"))
     (session-timeout . 3600)
     (token-rotation . #t))
    
    (monitoring
     (metrics-port . 9090)
     (health-check-path . "/health")
     (ready-check-path . "/ready"))
    
    (logging
     (level . warn)
     (output . cloudwatch)
     (format . json)
     (retention-days . 30))))
#+end_src

* Container Deployment

** Dockerfile Template
:PROPERTIES:
:ID: dockerfile
:END:

#+begin_src dockerfile :tangle docker/Dockerfile.template :mkdirp yes
# Multi-stage build for Guile ChangeFlow
# NOTE: This template is maintained in deployment.org

# Build stage
FROM debian:bookworm-slim AS builder

RUN apt-get update && apt-get install -y \
    guile-3.0 \
    guile-3.0-dev \
    guile-json \
    guile-gcrypt \
    build-essential \
    git \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /build
COPY . .

# Compile Guile modules
RUN find . -name "*.scm" -exec guild compile {} \;

# Runtime stage
FROM debian:bookworm-slim

RUN apt-get update && apt-get install -y \
    guile-3.0 \
    guile-json \
    guile-gcrypt \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -m -u 1000 changeflow

WORKDIR /app

# Copy compiled modules and sources
COPY --from=builder --chown=changeflow:changeflow /build/src ./src
COPY --from=builder --chown=changeflow:changeflow /build/*.go ./

USER changeflow

# Environment setup
ENV GUILE_LOAD_PATH=/app/src:$GUILE_LOAD_PATH
ENV GUILE_LOAD_COMPILED_PATH=/app/src:$GUILE_LOAD_COMPILED_PATH

EXPOSE 8080 9090

HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

ENTRYPOINT ["guile", "-l", "src/changeflow/main.scm", "-e", "main"]
#+end_src

** Docker Compose Development
:PROPERTIES:
:ID: docker-compose-dev
:END:

#+begin_src yaml :tangle docker/docker-compose.dev.yml :mkdirp yes
# Development Docker Compose
# NOTE: This file is tangled from deployment.org

version: '3.8'

services:
  changeflow:
    build:
      context: ..
      dockerfile: docker/Dockerfile.template
    ports:
      - "8080:8080"
      - "9090:9090"  # Metrics
    environment:
      - ENV=development
      - DEBUG=true
      - GITHUB_WEBHOOK_SECRET=dev-secret
      - GITHUB_TOKEN=dev-token
    volumes:
      - ../src:/app/src:ro
      - /tmp/changeflow-dev.db:/tmp/changeflow-dev.db
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  # Development OAuth mock server
  oauth-mock:
    image: ghcr.io/navikt/mock-oauth2-server:1.0.0
    ports:
      - "8081:8080"
    environment:
      - LOG_LEVEL=debug

volumes:
  redis-data:
#+end_src

* Kubernetes Deployment

** Base Kubernetes Resources
:PROPERTIES:
:ID: k8s-base
:END:

#+begin_src yaml :tangle k8s/base/namespace.yaml :mkdirp yes
# Namespace Definition
# NOTE: This file is tangled from deployment.org
apiVersion: v1
kind: Namespace
metadata:
  name: changeflow
  labels:
    app: changeflow
    environment: base
#+end_src

#+begin_src yaml :tangle k8s/base/deployment.yaml :mkdirp yes
# Base Deployment
# NOTE: This file is tangled from deployment.org
apiVersion: apps/v1
kind: Deployment
metadata:
  name: changeflow
  namespace: changeflow
spec:
  replicas: 3
  selector:
    matchLabels:
      app: changeflow
  template:
    metadata:
      labels:
        app: changeflow
    spec:
      serviceAccountName: changeflow
      containers:
      - name: changeflow
        image: changeflow:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: ENV
          valueFrom:
            configMapKeyRef:
              name: changeflow-config
              key: environment
        envFrom:
        - secretRef:
            name: changeflow-secrets
        - configMapRef:
            name: changeflow-config
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
#+end_src

** Kustomization Overlays
:PROPERTIES:
:ID: k8s-kustomize
:END:

#+begin_src yaml :tangle k8s/overlays/staging/kustomization.yaml :mkdirp yes
# Staging Overlay
# NOTE: This file is tangled from deployment.org
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: changeflow-staging

bases:
  - ../../base

patchesStrategicMerge:
  - deployment-patch.yaml

configMapGenerator:
  - name: changeflow-config
    literals:
      - environment=staging
      - log_level=info

secretGenerator:
  - name: changeflow-secrets
    envs:
      - secrets.env

replicas:
  - name: changeflow
    count: 2

images:
  - name: changeflow
    newName: registry.example.com/changeflow
    newTag: staging
#+end_src

* Systemd Service

** Service Unit File
:PROPERTIES:
:ID: systemd-service
:END:

#+begin_src conf :tangle systemd/changeflow.service :mkdirp yes
# Systemd Service Unit
# NOTE: This file is tangled from deployment.org

[Unit]
Description=Guile ChangeFlow MCP Server
Documentation=https://changeflow.example.com/docs
After=network.target postgresql.service redis.service
Wants=postgresql.service redis.service

[Service]
Type=notify
ExecStart=/usr/bin/guile -l /opt/changeflow/src/changeflow/main.scm -e main
ExecReload=/bin/kill -HUP $MAINPID
Restart=on-failure
RestartSec=5s

# User and permissions
User=changeflow
Group=changeflow
NoNewPrivileges=true

# Security hardening
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/var/lib/changeflow /var/log/changeflow
PrivateTmp=true
PrivateDevices=true
ProtectKernelTunables=true
ProtectControlGroups=true
RestrictSUIDSGID=true

# Resource limits
LimitNOFILE=65536
LimitNPROC=4096
MemoryLimit=2G
CPUQuota=200%

# Environment
Environment="ENV=production"
EnvironmentFile=/etc/changeflow/environment
WorkingDirectory=/opt/changeflow

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=changeflow

[Install]
WantedBy=multi-user.target
#+end_src

* Deployment Scripts

** Deployment Orchestrator
:PROPERTIES:
:ID: deploy-script
:END:

#+begin_src bash :tangle scripts/deploy.sh :mkdirp yes :shebang #!/bin/bash
# Deployment Script
# NOTE: This script is tangled from deployment.org

set -euo pipefail

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
ENVIRONMENT="${1:-staging}"
VERSION="${2:-latest}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $*"
}

error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
    exit 1
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $*"
}

# Validate environment
validate_environment() {
    case "$ENVIRONMENT" in
        development|staging|production)
            log "Deploying to $ENVIRONMENT environment"
            ;;
        *)
            error "Invalid environment: $ENVIRONMENT"
            ;;
    esac
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    # Check for required tools
    for tool in git guile guild docker kubectl; do
        if ! command -v "$tool" &> /dev/null; then
            error "$tool is required but not installed"
        fi
    done
    
    # Check Git status
    if [[ -n $(git status -s) ]]; then
        warn "Working directory has uncommitted changes"
    fi
}

# Tangle org files
tangle_configs() {
    log "Tangling configuration from org files..."
    
    cd "$PROJECT_ROOT"
    emacs --batch \
          --eval "(require 'org)" \
          --eval "(org-babel-tangle-file \"deployment.org\")" \
          2>/dev/null || error "Failed to tangle deployment.org"
}

# Build application
build_application() {
    log "Building application..."
    
    # Create worktree for build
    BUILD_DIR="/tmp/changeflow-build-$$"
    git worktree add "$BUILD_DIR" "release/v${VERSION}" || \
        git worktree add "$BUILD_DIR" -b "release/v${VERSION}" main
    
    cd "$BUILD_DIR"
    
    # Compile Guile modules
    find src -name "*.scm" -exec guild compile {} \;
    
    # Build Docker image
    docker build -t "changeflow:${VERSION}" \
                 -f docker/Dockerfile.template .
    
    # Cleanup worktree
    cd "$PROJECT_ROOT"
    git worktree remove "$BUILD_DIR"
}

# Deploy to environment
deploy() {
    log "Deploying version $VERSION to $ENVIRONMENT..."
    
    case "$ENVIRONMENT" in
        development)
            deploy_development
            ;;
        staging)
            deploy_staging
            ;;
        production)
            deploy_production
            ;;
    esac
}

deploy_development() {
    log "Starting development deployment..."
    
    cd "$PROJECT_ROOT/docker"
    docker-compose -f docker-compose.dev.yml up -d
    
    log "Development deployment complete"
    log "Access at: http://localhost:8080"
}

deploy_staging() {
    log "Starting staging deployment..."
    
    # Apply Kubernetes resources
    kubectl apply -k k8s/overlays/staging/
    
    # Wait for rollout
    kubectl -n changeflow-staging rollout status deployment/changeflow
    
    log "Staging deployment complete"
}

deploy_production() {
    log "Starting production deployment..."
    
    # Confirmation
    read -p "Deploy to PRODUCTION? Type 'yes' to confirm: " confirm
    [[ "$confirm" == "yes" ]] || error "Production deployment cancelled"
    
    # Blue-green deployment
    kubectl apply -k k8s/overlays/production/
    kubectl -n changeflow-production rollout status deployment/changeflow
    
    log "Production deployment complete"
}

# Health check
health_check() {
    log "Running health checks..."
    
    case "$ENVIRONMENT" in
        development)
            URL="http://localhost:8080/health"
            ;;
        staging)
            URL="https://staging.changeflow.example.com/health"
            ;;
        production)
            URL="https://api.changeflow.io/health"
            ;;
    esac
    
    if curl -sf "$URL" > /dev/null; then
        log "Health check passed"
    else
        error "Health check failed"
    fi
}

# Main execution
main() {
    validate_environment
    check_prerequisites
    tangle_configs
    build_application
    deploy
    health_check
    
    log "Deployment completed successfully!"
}

main "$@"
#+end_src

* Monitoring Configuration

** Prometheus Scrape Config
:PROPERTIES:
:ID: prometheus-config
:END:

#+begin_src yaml :tangle monitoring/prometheus-scrape.yaml :mkdirp yes
# Prometheus Scrape Configuration
# NOTE: This file is tangled from deployment.org

scrape_configs:
  - job_name: 'changeflow'
    static_configs:
      - targets: ['changeflow:9090']
    metrics_path: '/metrics'
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
        regex: '([^:]+):.*'
        replacement: '${1}'
#+end_src

** Grafana Dashboard
:PROPERTIES:
:ID: grafana-dashboard
:END:

#+begin_src json :tangle monitoring/changeflow-dashboard.json :mkdirp yes
{
  "dashboard": {
    "title": "ChangeFlow MCP Server",
    "panels": [
      {
        "title": "Request Rate",
        "targets": [
          {
            "expr": "rate(changeflow_http_requests_total[5m])"
          }
        ]
      },
      {
        "title": "Change Request Status",
        "targets": [
          {
            "expr": "changeflow_changes_by_status"
          }
        ]
      },
      {
        "title": "Risk Score Distribution",
        "targets": [
          {
            "expr": "histogram_quantile(0.95, changeflow_risk_score_bucket)"
          }
        ]
      },
      {
        "title": "Approval Times",
        "targets": [
          {
            "expr": "changeflow_approval_duration_seconds"
          }
        ]
      }
    ]
  }
}
#+end_src

* Environment Variables Template

** Development Environment
:PROPERTIES:
:ID: env-dev
:END:

#+begin_src conf :tangle env/development.env.template :mkdirp yes
# Development Environment Variables
# NOTE: Copy to .env and fill in values

# Server
ENV=development
DEBUG=true
LOG_LEVEL=debug

# Database
DB_TYPE=sqlite
DB_PATH=/tmp/changeflow-dev.db

# GitHub Integration
GITHUB_WEBHOOK_SECRET=your-dev-webhook-secret
GITHUB_TOKEN=your-dev-github-token

# OAuth (Mock Server)
OAUTH_CLIENT_ID=dev-client
OAUTH_CLIENT_SECRET=dev-secret
OAUTH_REDIRECT_URI=http://localhost:8080/oauth/callback

# Optional Integrations (disabled in dev)
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
SLACK_WEBHOOK_URL=
#+end_src

** Production Environment
:PROPERTIES:
:ID: env-prod
:END:

#+begin_src conf :tangle env/production.env.template :mkdirp yes
# Production Environment Variables
# NOTE: Set these in your secret management system

# Server
ENV=production
DEBUG=false
LOG_LEVEL=warn
WORKER_COUNT=8

# Database
DB_HOST=
DB_PORT=5432
DB_NAME=changeflow_production
DB_USER=
DB_PASSWORD=

# Redis Cluster
REDIS_NODES=redis-1:6379,redis-2:6379,redis-3:6379
REDIS_PASSWORD=

# GitHub Integration
GITHUB_WEBHOOK_SECRET=
GITHUB_APP_ID=
GITHUB_APP_PRIVATE_KEY_PATH=/secrets/github-app.pem

# Google Calendar
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_SERVICE_ACCOUNT_PATH=/secrets/google-service-account.json

# Slack
SLACK_APP_TOKEN=
SLACK_SIGNING_SECRET=

# Monitoring
SENTRY_DSN=
DATADOG_API_KEY=
#+end_src

* Deployment Checklist

** Pre-Deployment
:PROPERTIES:
:ID: pre-deploy-checklist
:END:

#+begin_src org :tangle checklists/pre-deployment.org :mkdirp yes
,#+TITLE: Pre-Deployment Checklist
,#+AUTHOR: DevOps Team

,* Code Preparation
- [ ] All tests passing in CI
- [ ] Security scan completed
- [ ] Dependencies updated
- [ ] Version bumped
- [ ] CHANGELOG.md updated

,* Configuration
- [ ] Environment variables set
- [ ] Secrets rotated if needed
- [ ] Configuration tangled from org files
- [ ] Database migrations prepared

,* Infrastructure
- [ ] Database backed up
- [ ] Redis cache cleared if needed
- [ ] Load balancer health checks verified
- [ ] Monitoring alerts configured

,* Communication
- [ ] Deployment window scheduled
- [ ] Team notified
- [ ] Status page updated
- [ ] Rollback plan documented
#+end_src

** Post-Deployment
:PROPERTIES:
:ID: post-deploy-checklist
:END:

#+begin_src org :tangle checklists/post-deployment.org :mkdirp yes
,#+TITLE: Post-Deployment Checklist
,#+AUTHOR: DevOps Team

,* Verification
- [ ] Health checks passing
- [ ] Smoke tests completed
- [ ] Metrics flowing to monitoring
- [ ] Logs aggregating properly

,* Functionality
- [ ] MCP endpoint responding
- [ ] OAuth flow working
- [ ] Tool discovery functional
- [ ] Integrations connected

,* Performance
- [ ] Response times within SLA
- [ ] No memory leaks detected
- [ ] CPU usage normal
- [ ] Database queries optimized

,* Documentation
- [ ] Deployment noted in runbook
- [ ] Any issues documented
- [ ] Lessons learned captured
- [ ] Next steps identified
#+end_src

* Notes for Implementation Teams

** Branch Strategy
:PROPERTIES:
:ID: branch-strategy
:END:

This deployment configuration assumes the following branch/worktree structure:

1. *main* - Contains only org-mode documentation
2. *feature/** - Implementation branches for specific features
3. *release/** - Release branches with compiled code
4. *hotfix/** - Emergency fixes

Example workflow:
#+begin_src bash
# Start new feature from main
git worktree add -b feature/risk-engine ../changeflow-risk-engine main

# Work in feature branch
cd ../changeflow-risk-engine
# ... implement feature ...

# Create release from main + features
git worktree add -b release/v1.0 ../changeflow-release main
cd ../changeflow-release
git merge feature/core feature/mcp-protocol feature/risk-engine

# Deploy from release branch
./scripts/deploy.sh production v1.0
#+end_src

** Tangle and Deploy
:PROPERTIES:
:ID: tangle-deploy
:END:

All deployment configurations are maintained in this org file and tangled to appropriate locations:

#+begin_src bash
# Tangle all configurations
emacs --batch -l org -f org-babel-tangle deployment.org

# Or use make
make tangle-configs

# Deploy to specific environment
./scripts/deploy.sh staging v1.0-rc1
#+end_src

Remember: The main branch is the source of truth for all documentation and configuration!
