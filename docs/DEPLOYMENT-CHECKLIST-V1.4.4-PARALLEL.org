#+TITLE: ITIL Parallel Deployment Checklist - v1.4.4
#+AUTHOR: Jason Walsh
#+DATE: [2025-09-15 Sun]
#+OPTIONS: toc:2 num:t ^:nil

* 📋 Change Request Information (RFC)

** Change Details
| Field | Value |
|-------+-------|
| Change ID | CHG-2025-09-15-002 |
| Change Type | Standard Change (Optimized) |
| Version | 1.4.2 → 1.4.4 |
| Priority | Medium |
| Risk Level | Low |
| Requester | Jason Walsh |
| Implementation Date | 2025-09-15 14:00 PM EDT |
| Estimated Duration | 25 minutes (parallel) |
| Rollback Duration | 10 minutes |

** Change Description
Parallel deployment of Guile ChangeFlow v1.4.4 to staging and production environments:
- Enhanced ITIL chaos simulator with 100 reproducible demo PRs
- Guile 3.0.10 compatibility updates
- Parallel deployment strategy for faster rollout
- Comprehensive validation and rollback procedures

** Optimization Benefits
- **Time Savings**: 45 min → 25 min (44% reduction)
- **Risk Mitigation**: Faster detection of issues
- **Resource Efficiency**: Better utilization of deployment windows
- **Validation Speed**: Immediate comparison of environments

* 🚀 Parallel Deployment Strategy

** Architecture Overview
#+BEGIN_SRC text
    ┌──────────────────┐
    │  Git Repository  │
    │    (v1.4.4)      │
    └────────┬─────────┘
             │
      ┌──────┴──────┐
      │  Parallel   │
      │  Deployment │
      └──┬──────┬───┘
         │      │
    ┌────┴──┐ ┌─┴─────┐
    │  STG  │ │  PRD  │
    └───┬───┘ └───┬───┘
        │         │
    ┌───┴───┐ ┌───┴───┐
    │Validate│ │Validate│
    └───────┘ └───────┘
#+END_SRC

** Deployment Timeline
| Time | Staging | Production | Notes |
|------+---------+------------+-------|
| T+0 | Deploy | Deploy | Parallel start |
| T+5 | Validate | Validate | Health checks |
| T+10 | Test Suite | Test Suite | Automated tests |
| T+15 | Manual Check | Manual Check | UI verification |
| T+20 | Complete | Complete | Version confirm |
| T+25 | - | Final Validation | Production only |

* 🔍 Pre-Implementation Phase

** Pre-Flight Checklist
#+BEGIN_SRC bash
#!/bin/bash
# Pre-deployment validation script

echo "🔍 Running pre-deployment checks for v1.4.4..."

# Check both environments are accessible
check_environments() {
  local staging_health=$(curl -s -o /dev/null -w "%{http_code}" https://staging.mcp.changeflow.us/health)
  local prod_health=$(curl -s -o /dev/null -w "%{http_code}" https://mcp.changeflow.us/health)

  if [[ $staging_health -eq 200 && $prod_health -eq 200 ]]; then
    echo "✅ Both environments healthy"
    return 0
  else
    echo "❌ Environment check failed (STG: $staging_health, PRD: $prod_health)"
    return 1
  fi
}

# Verify deployment credentials
check_credentials() {
  wrangler whoami &>/dev/null
  if [ $? -eq 0 ]; then
    echo "✅ Wrangler authenticated"
    return 0
  else
    echo "❌ Wrangler authentication failed"
    return 1
  fi
}

# Confirm version tag exists
check_version_tag() {
  git rev-parse v1.4.4 &>/dev/null
  if [ $? -eq 0 ]; then
    echo "✅ Version tag v1.4.4 exists"
    return 0
  else
    echo "❌ Version tag v1.4.4 not found"
    return 1
  fi
}

# Run all checks
check_environments && check_credentials && check_version_tag
#+END_SRC

* 🚀 Parallel Deployment Phase

** Step 1: Initiate Parallel Deployment (T+0)

*** Deployment Script
#+BEGIN_SRC bash
#!/bin/bash
# Parallel deployment script for v1.4.4

echo "🚀 Starting parallel deployment of v1.4.4"
echo "Timestamp: $(date -Iseconds)"

# Create deployment checkpoint
git tag -a v1.4.4-deploy -m "Parallel deployment v1.4.4" || true
git push origin v1.4.4-deploy &

# Function to deploy to an environment
deploy_environment() {
  local env_name=$1
  local worker_name=$2
  local url=$3

  echo "[$env_name] Starting deployment..."

  # Deploy
  wrangler deploy --name $worker_name \
    --compatibility-date 2024-01-01 \
    --vars VERSION:1.4.4 \
    2>&1 | tee /tmp/deploy-$env_name.log

  # Initial health check
  sleep 5
  local health=$(curl -s -o /dev/null -w "%{http_code}" $url/health)

  if [ $health -eq 200 ]; then
    echo "[$env_name] ✅ Deployment successful"
    return 0
  else
    echo "[$env_name] ❌ Deployment failed (HTTP $health)"
    return 1
  fi
}

# Deploy to both environments in parallel
deploy_environment "STAGING" "guile-changeflow-staging" "https://staging.mcp.changeflow.us" &
STAGING_PID=$!

deploy_environment "PRODUCTION" "guile-changeflow-prod" "https://mcp.changeflow.us" &
PRODUCTION_PID=$!

# Wait for both deployments
echo "⏳ Waiting for parallel deployments to complete..."
wait $STAGING_PID
STAGING_RESULT=$?

wait $PRODUCTION_PID
PRODUCTION_RESULT=$?

# Check results
if [[ $STAGING_RESULT -eq 0 && $PRODUCTION_RESULT -eq 0 ]]; then
  echo "✅ Both deployments successful"
  exit 0
else
  echo "⚠️ Deployment issues detected:"
  [ $STAGING_RESULT -ne 0 ] && echo "  - Staging deployment failed"
  [ $PRODUCTION_RESULT -ne 0 ] && echo "  - Production deployment failed"
  exit 1
fi
#+END_SRC

** Step 2: Parallel Validation (T+5)

*** Automated Validation Script
#+BEGIN_SRC bash
#!/bin/bash
# Parallel validation for both environments

validate_environment() {
  local env_name=$1
  local base_url=$2
  local expected_version="1.4.4"

  echo "[$env_name] Starting validation..."

  # 1. Health check
  local health=$(curl -s $base_url/health | jq -r .status)
  if [ "$health" != "healthy" ]; then
    echo "[$env_name] ❌ Health check failed: $health"
    return 1
  fi

  # 2. Version verification
  local version=$(curl -s $base_url/version | jq -r .version)
  if [ "$version" != "$expected_version" ]; then
    echo "[$env_name] ❌ Version mismatch: expected $expected_version, got $version"
    return 1
  fi

  # 3. MCP protocol test
  local mcp_response=$(curl -s -X POST $base_url/mcp \
    -H "Content-Type: application/json" \
    -d '{"jsonrpc":"2.0","method":"initialize","params":{},"id":1}' | jq -r .result)

  if [ -z "$mcp_response" ]; then
    echo "[$env_name] ❌ MCP protocol test failed"
    return 1
  fi

  # 4. Performance check
  local response_time=$(curl -s -w "%{time_total}" -o /dev/null $base_url/health)
  if (( $(echo "$response_time > 1.0" | bc -l) )); then
    echo "[$env_name] ⚠️ Slow response time: ${response_time}s"
  fi

  echo "[$env_name] ✅ All validations passed"
  return 0
}

# Run validations in parallel
validate_environment "STAGING" "https://staging.mcp.changeflow.us" &
STG_VAL_PID=$!

validate_environment "PRODUCTION" "https://mcp.changeflow.us" &
PRD_VAL_PID=$!

# Wait for validations
wait $STG_VAL_PID
STG_VAL_RESULT=$?

wait $PRD_VAL_PID
PRD_VAL_RESULT=$?

# Report results
echo ""
echo "📊 Validation Results:"
echo "  Staging: $([ $STG_VAL_RESULT -eq 0 ] && echo '✅ PASS' || echo '❌ FAIL')"
echo "  Production: $([ $PRD_VAL_RESULT -eq 0 ] && echo '✅ PASS' || echo '❌ FAIL')"

# Exit with failure if either validation failed
[ $STG_VAL_RESULT -ne 0 ] || [ $PRD_VAL_RESULT -ne 0 ] && exit 1
exit 0
#+END_SRC

** Step 3: Production-Specific Validation (T+20)

*** Enhanced Production Verification
#+BEGIN_SRC bash
#!/bin/bash
# Final production validation with enhanced checks

echo "🔍 Running enhanced production validation..."

PROD_URL="https://mcp.changeflow.us"

# 1. Verify exact version
echo "Checking production version..."
PROD_VERSION=$(curl -s $PROD_URL/version | jq -r .version)
if [ "$PROD_VERSION" = "1.4.4" ]; then
  echo "✅ Production running v1.4.4"
else
  echo "❌ Version mismatch: $PROD_VERSION (expected 1.4.4)"
  exit 1
fi

# 2. Check all MCP tools are available
echo "Verifying MCP tools..."
TOOLS_COUNT=$(curl -s -X POST $PROD_URL/mcp \
  -H "Content-Type: application/json" \
  -d '{"jsonrpc":"2.0","method":"tools/list","params":{},"id":1}' | jq '.result.tools | length')

if [ $TOOLS_COUNT -gt 0 ]; then
  echo "✅ $TOOLS_COUNT MCP tools available"
else
  echo "❌ No MCP tools found"
  exit 1
fi

# 3. Verify demo data endpoint
echo "Checking demo data availability..."
DEMO_COUNT=$(curl -s $PROD_URL/api/demo-changes | jq '. | length')
if [ $DEMO_COUNT -eq 100 ]; then
  echo "✅ All 100 demo PRs available"
else
  echo "⚠️ Demo data count: $DEMO_COUNT (expected 100)"
fi

# 4. Performance metrics
echo "Collecting performance metrics..."
for i in {1..10}; do
  curl -s -w "%{time_total}\n" -o /dev/null $PROD_URL/health
done | awk '{sum+=$1} END {printf "Average response time: %.3fs\n", sum/NR}'

# 5. Check rollback readiness
echo "Verifying rollback capability..."
ROLLBACK_READY=$(curl -s $PROD_URL/api/rollback/status | jq -r .ready)
if [ "$ROLLBACK_READY" = "true" ]; then
  echo "✅ Rollback mechanism ready"
else
  echo "⚠️ Rollback not ready"
fi

# 6. Final status
echo ""
echo "════════════════════════════════════════"
echo "  Production Validation Complete"
echo "  Version: $PROD_VERSION"
echo "  Status: OPERATIONAL"
echo "  Time: $(date +%H:%M:%S)"
echo "════════════════════════════════════════"
#+END_SRC

* 🔄 Rollback Procedures (If Needed)

** Parallel Rollback Script
#+BEGIN_SRC bash
#!/bin/bash
# Emergency parallel rollback

rollback_environment() {
  local env_name=$1
  local worker_name=$2

  echo "[$env_name] Initiating rollback..."
  wrangler rollback --name $worker_name

  if [ $? -eq 0 ]; then
    echo "[$env_name] ✅ Rollback successful"
    return 0
  else
    echo "[$env_name] ❌ Rollback failed - manual intervention required"
    return 1
  fi
}

# Rollback both environments simultaneously
echo "🔄 EMERGENCY: Initiating parallel rollback"

rollback_environment "STAGING" "guile-changeflow-staging" &
STG_RB_PID=$!

rollback_environment "PRODUCTION" "guile-changeflow-prod" &
PRD_RB_PID=$!

# Wait for rollbacks
wait $STG_RB_PID
wait $PRD_RB_PID

# Notify
echo "ROLLBACK COMPLETED: v1.4.4 → v1.4.2" | \
  slack-cli send --channel "#incidents"
#+END_SRC

* 📊 Monitoring Dashboard

** Real-Time Parallel Monitoring
#+BEGIN_SRC bash
#!/bin/bash
# Monitor both environments simultaneously

while true; do
  clear
  echo "📊 Parallel Environment Monitoring - $(date +%H:%M:%S)"
  echo "════════════════════════════════════════════════"

  # Staging metrics
  echo "STAGING:"
  curl -s https://staging.mcp.changeflow.us/metrics | \
    jq '{version, health, response_time_ms: .response_time, error_rate}'

  echo ""
  echo "PRODUCTION:"
  curl -s https://mcp.changeflow.us/metrics | \
    jq '{version, health, response_time_ms: .response_time, error_rate}'

  echo "════════════════════════════════════════════════"
  echo "Press Ctrl+C to exit"
  sleep 5
done
#+END_SRC

* ✅ Success Criteria

** Deployment Success Metrics
| Metric | Target | Staging | Production | Status |
|--------+--------+---------+------------+--------|
| Deployment Time | <5 min | - | - | ⏱️ |
| Version Match | 1.4.4 | - | - | 🔍 |
| Health Status | 200 OK | - | - | 🏥 |
| Response Time | <500ms | - | - | ⚡ |
| Error Rate | <0.1% | - | - | 📈 |
| MCP Tools | >10 | - | - | 🛠️ |
| Demo PRs | 100 | - | - | 📝 |

** Final Checklist
- [ ] Both environments deployed successfully
- [ ] Staging validation passed
- [ ] Production validation passed
- [ ] Version 1.4.4 confirmed in production
- [ ] Performance metrics within SLA
- [ ] Rollback mechanism tested and ready
- [ ] Team notified of successful deployment
- [ ] Documentation updated

* 📝 Post-Deployment Actions

** Immediate Actions (T+30)
1. Confirm version in production: `curl https://mcp.changeflow.us/version`
2. Monitor error rates for 15 minutes
3. Update status page
4. Close change request

** Follow-Up Actions (T+24 hours)
1. Collect 24-hour metrics
2. Review any incidents
3. Document lessons learned
4. Update deployment playbook if needed

* 🎯 Quick Reference Commands

#+BEGIN_SRC bash
# Deploy both environments in parallel
./scripts/parallel-deploy.sh

# Validate both environments
./scripts/parallel-validate.sh

# Check production version
curl -s https://mcp.changeflow.us/version | jq .

# Monitor both environments
watch -n 5 './scripts/parallel-monitor.sh'

# Emergency rollback
./scripts/parallel-rollback.sh

# View deployment logs
wrangler tail guile-changeflow-staging &
wrangler tail guile-changeflow-prod &
#+END_SRC

---
*Generated for Guile ChangeFlow v1.4.4 - Parallel Deployment Strategy*