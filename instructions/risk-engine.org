#+TITLE: Risk Engine Agent Instructions
#+DATE: 2025-09-13
#+STARTUP: overview

* Your Mission

You are the Risk Engine agent working on the Guile ChangeFlow system.

Your worktree: /home/dsp-dr/ghq/github.com/dsp-dr/gcf-risk-engine
Your branch: feat/risk-engine
Your focus: Risk assessment and scoring for change requests

* Priority Tasks

1. Create risk calculation algorithm
2. Define risk factors and weights
3. Implement risk categories (low/medium/high/critical)
4. Create freeze period checker
5. Export functions for other agents to use

* File Structure to Create

#+begin_example
src/
├── risk/
│   ├── calculator.scm    # Main risk calculation
│   ├── factors.scm       # Risk factor definitions
│   ├── freeze.scm        # Freeze period checking
│   └── categories.scm    # Risk categorization
└── main.scm              # Module exports
#+end_example

* Critical Deliverables (MUST HAVE for Demo)

- [ ] calculate-risk function returns 0-100 score
- [ ] Risk factors: keywords in title, system count, time of day
- [ ] Categories: 0-30 low, 31-70 medium, 71-90 high, 91-100 critical
- [ ] Simple freeze period check (weekends = high risk)
- [ ] Can be called by MCP server

* Code Template to Start With

** src/risk/calculator.scm
#+begin_src scheme
(define-module (risk calculator)
  #:use-module (risk factors)
  #:use-module (srfi srfi-13)  ; string operations
  #:export (calculate-risk
            calculate-change-risk))

(define (calculate-risk title description systems)
  "Calculate risk score from 0-100 based on various factors"
  (let ((base-score 10)
        (title-risk (calculate-title-risk title))
        (system-risk (calculate-system-risk systems))
        (time-risk (calculate-time-risk)))

    (min 100 (+ base-score title-risk system-risk time-risk))))

(define (calculate-title-risk title)
  "Check for risky keywords in title"
  (let ((risky-words '("production" "security" "payment" "auth" "database" "critical")))
    (fold (lambda (word score)
            (if (string-contains-ci title word)
                (+ score 20)
                score))
          0
          risky-words)))

(define (calculate-system-risk systems)
  "More systems = higher risk"
  (cond
    ((null? systems) 0)
    ((= (length systems) 1) 10)
    ((= (length systems) 2) 25)
    (else 40)))

(define (calculate-time-risk)
  "Weekend or after hours = higher risk"
  (let* ((now (current-time))
         (date (time-utc->date now))
         (hour (date-hour date))
         (day (date-week-day date)))
    (cond
      ((or (= day 0) (= day 6)) 30)  ; Weekend
      ((or (< hour 9) (> hour 17)) 20)  ; After hours
      (else 0))))
#+end_src

** src/risk/factors.scm
#+begin_src scheme
(define-module (risk factors)
  #:export (risk-factors
            get-factor-weight
            high-risk-keywords))

(define risk-factors
  '((production . 40)
    (security . 35)
    (payment . 45)
    (database . 30)
    (authentication . 35)
    (infrastructure . 25)
    (configuration . 15)
    (documentation . 5)
    (testing . 10)))

(define high-risk-keywords
  '("delete" "drop" "truncate" "production" "payment" "security" "auth" "credential"))

(define (get-factor-weight factor)
  (or (assoc-ref risk-factors factor) 10))
#+end_src

** src/risk/categories.scm
#+begin_src scheme
(define-module (risk categories)
  #:export (categorize-risk
            get-risk-color
            get-approval-requirement))

(define (categorize-risk score)
  "Categorize risk score into low/medium/high/critical"
  (cond
    ((< score 30) 'low)
    ((< score 70) 'medium)
    ((< score 90) 'high)
    (else 'critical)))

(define (get-risk-color category)
  "Get color for risk category (for web UI)"
  (case category
    ((low) "green")
    ((medium) "yellow")
    ((high) "orange")
    ((critical) "red")
    (else "gray")))

(define (get-approval-requirement category)
  "How many approvals needed based on risk"
  (case category
    ((low) 1)
    ((medium) 2)
    ((high) 3)
    ((critical) 5)
    (else 1)))
#+end_src

** src/risk/freeze.scm
#+begin_src scheme
(define-module (risk freeze)
  #:use-module (srfi srfi-19)
  #:export (in-freeze-period?
            get-next-window
            check-blackout-dates))

(define (in-freeze-period?)
  "Check if we're in a deployment freeze period"
  (let* ((now (current-time))
         (date (time-utc->date now))
         (hour (date-hour date))
         (day (date-week-day date))
         (month (date-month date))
         (day-of-month (date-day date)))

    (or
     ;; Weekends
     (or (= day 0) (= day 6))

     ;; After hours (before 9am or after 5pm)
     (or (< hour 9) (> hour 17))

     ;; December freeze (holidays)
     (and (= month 12) (> day-of-month 15))

     ;; Black Friday week
     (and (= month 11) (>= day-of-month 20) (<= day-of-month 30)))))

(define (get-next-window)
  "Get next deployment window"
  (if (in-freeze-period?)
      "Next Monday 9:00 AM"
      "Now - deployment window open"))
#+end_src

* Integration Points

- Called by MCP Server (Agent 2) for assess_risk tool
- Updates risk scores in Core Models (Agent 1)
- Risk scores displayed in Web Interface (Agent 4)
- Freeze periods affect GitHub webhook processing (Agent 5)

* Testing Your Work

#+begin_src scheme
;; Test in Guile REPL
(add-to-load-path "src")
(use-modules (risk calculator))

;; Low risk
(display (calculate-risk "Update documentation" "Fix typos" '()))
;; Should return ~10-15

;; High risk
(display (calculate-risk "Production payment fix" "Critical security patch" '("payment" "auth" "api")))
;; Should return ~85-95

;; Check freeze period
(use-modules (risk freeze))
(display (in-freeze-period?))
(display (get-next-window))
#+end_src

* Timeline

- Hour 1: Basic calculator setup
- Hour 2: Risk factors implementation
- Hour 3: Categories and freeze periods
- Hour 4: Testing various scenarios
- Hour 5: Ready for integration

* Notes

- Simple algorithm is fine - just needs to return 0-100
- Focus on keywords that sound risky
- Weekend = automatic high risk (demo this!)
- Make sure scores are reproducible for demo