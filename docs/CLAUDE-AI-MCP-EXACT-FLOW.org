* Claude.ai MCP Remote Server - EXACT Configuration Required
:PROPERTIES:
:CUSTOM_ID: claude.ai-mcp-remote-server---exact-configuration-required
:END:
** Actual OAuth Request from Claude.ai
:PROPERTIES:
:CUSTOM_ID: actual-oauth-request-from-claude.ai
:END:
When Claude.ai connects to your MCP server, it sends:

#+begin_example
https://mcp.changeflow.us/authorize?
  response_type=code
  &client_id=8f73a025-a1f2-4c84-8f2d-43b77ec9117f
  &redirect_uri=https%3A%2F%2Fclaude.ai%2Fapi%2Fmcp%2Fauth_callback
  &code_challenge=oeqH6ISYQcPPFt9pmvzU1rqJEMiMC4ZyaelL1HJMaug
  &code_challenge_method=S256
  &state=CXHJxTJtGDwnubO5omp-45zXcf7YmRRKEFtKr-B1Xe4
  &scope=claudeai
#+end_example

** Critical Requirements for Claude.ai Integration
:PROPERTIES:
:CUSTOM_ID: critical-requirements-for-claude.ai-integration
:END:
*** 1. OAuth 2.0 with PKCE
:PROPERTIES:
:CUSTOM_ID: oauth-2.0-with-pkce
:END:
- *response_type*: =code= (authorization code flow)
- *client_id*: Dynamic UUID generated by Claude.ai
- *redirect_uri*: Always =https://claude.ai/api/mcp/auth_callback=
- *code_challenge*: PKCE challenge (Base64URL encoded)
- *code_challenge_method*: =S256= (SHA256)
- *state*: Random string for CSRF protection
- *scope*: =claudeai=

*** 2. Required Endpoints
:PROPERTIES:
:CUSTOM_ID: required-endpoints
:END:
**** =/authorize= - OAuth Authorization Endpoint
:PROPERTIES:
:CUSTOM_ID: authorize---oauth-authorization-endpoint
:END:
- Must accept GET requests with above parameters
- Should display consent page
- Must redirect to Claude.ai callback with authorization code

**** =/token= - OAuth Token Exchange
:PROPERTIES:
:CUSTOM_ID: token---oauth-token-exchange
:END:
- POST endpoint
- Exchange authorization code for access token
- Must validate PKCE code_verifier

**** =/v1/sse= - MCP Protocol Endpoint
:PROPERTIES:
:CUSTOM_ID: v1sse---mcp-protocol-endpoint
:END:
- Initial request returns 401 if no auth
- With Bearer token: returns SSE stream
- Implements MCP protocol over Server-Sent Events

**** =/.well-known/oauth-authorization-server= - Discovery Endpoint
:PROPERTIES:
:CUSTOM_ID: well-knownoauth-authorization-server---discovery-endpoint
:END:
- Returns OAuth server metadata
- Required for automated configuration

*** 3. Authentication Flow
:PROPERTIES:
:CUSTOM_ID: authentication-flow
:END:
#+begin_src mermaid
sequenceDiagram
    participant Claude.ai
    participant Your MCP Server
    participant User

    Claude.ai->>Your MCP Server: GET /v1/sse
    Your MCP Server-->>Claude.ai: 401 Unauthorized + WWW-Authenticate

    Claude.ai->>Your MCP Server: GET /authorize?client_id=...&code_challenge=...
    Your MCP Server->>User: Display Consent Page
    User->>Your MCP Server: Approve Access
    Your MCP Server-->>Claude.ai: Redirect to callback with code

    Claude.ai->>Your MCP Server: POST /token (code + code_verifier)
    Your MCP Server-->>Claude.ai: Access Token

    Claude.ai->>Your MCP Server: GET /v1/sse (Bearer token)
    Your MCP Server-->>Claude.ai: SSE Stream with MCP messages
#+end_src

*** 4. Current Implementation Issues
:PROPERTIES:
:CUSTOM_ID: current-implementation-issues
:END:
**** ❌ Dynamic Client Registration
:PROPERTIES:
:CUSTOM_ID: dynamic-client-registration
:END:
Claude.ai sends a different =client_id= each time. Our current
implementation expects a fixed GitHub OAuth client_id.

*Required Fix*:

#+begin_src javascript
// Accept any client_id from Claude.ai
case '/authorize':
  const clientId = url.searchParams.get('client_id');
  // Don't validate against fixed GITHUB_CLIENT_ID
  // Claude.ai generates UUIDs dynamically
#+end_src

**** ❌ PKCE Validation
:PROPERTIES:
:CUSTOM_ID: pkce-validation
:END:
Must properly handle code_challenge and code_verifier:

#+begin_src javascript
// Store code_challenge with authorization code
authCodes.set(code, {
  clientId,
  redirectUri,
  codeChallenge,
  codeChallengeMethod
});

// Validate in /token endpoint
const codeVerifier = params.get('code_verifier');
const challenge = authCode.codeChallenge;
const method = authCode.codeChallengeMethod;

if (method === 'S256') {
  const hash = await crypto.subtle.digest('SHA-256',
    new TextEncoder().encode(codeVerifier));
  const computed = base64url(hash);
  if (computed !== challenge) {
    return error('invalid_grant');
  }
}
#+end_src

**** ❌ Scope Handling
:PROPERTIES:
:CUSTOM_ID: scope-handling
:END:
Claude.ai requests =scope=claudeai=, not GitHub scopes:

#+begin_src javascript
// Accept claudeai scope
const scope = url.searchParams.get('scope');
if (scope === 'claudeai') {
  // Grant MCP access
}
#+end_src

*** 5. Cloudflare Deployment Configuration
:PROPERTIES:
:CUSTOM_ID: cloudflare-deployment-configuration
:END:
*wrangler.toml* (current):

#+begin_src toml
name = "guile-changeflow-prod"
main = "worker.js"
compatibility_date = "2025-01-13"

[vars]
ENVIRONMENT = "production"
LOG_LEVEL = "info"
GITHUB_CLIENT_ID = "Ov23lir2JJgJffb51RPs"  # Not used for Claude.ai!
#+end_src

*Custom Domain*: Required for Claude.ai - Must use =mcp.changeflow.us=
(configured in Cloudflare dashboard) - Cannot use =.workers.dev=
subdomain

*** 6. Testing with Claude.ai
:PROPERTIES:
:CUSTOM_ID: testing-with-claude.ai
:END:
1. Open Claude.ai
2. Go to Settings → Developer → MCP Servers
3. Add server: =https://mcp.changeflow.us=
4. Claude.ai will:
   - Try to GET =/v1/sse=
   - Receive 401
   - Redirect to =/authorize= with parameters shown above
   - Expect consent page
   - Handle callback to =https://claude.ai/api/mcp/auth_callback=

*** 7. Critical Success Factors
:PROPERTIES:
:CUSTOM_ID: critical-success-factors
:END:
✅ *Working*: - Basic OAuth flow structure - SSE endpoint returns 401
when unauthenticated - Discovery endpoint exists - Custom domain
configured

❌ *Needs Fixing*: - Dynamic client_id acceptance (currently expects
GitHub client) - PKCE validation implementation - Scope validation for
"claudeai" - Session/token management for Claude.ai clients

*** 8. Minimum Viable Fix
:PROPERTIES:
:CUSTOM_ID: minimum-viable-fix
:END:
To make it work with Claude.ai RIGHT NOW:

#+begin_src javascript
case '/authorize':
  // Accept ANY client_id from Claude.ai
  const clientId = url.searchParams.get('client_id');
  const redirectUri = url.searchParams.get('redirect_uri');

  // Skip GitHub OAuth, just show consent and redirect
  if (redirectUri.startsWith('https://claude.ai/')) {
    // Generate authorization code
    const code = generateRandomCode();

    // Store for token exchange
    authCodes.set(code, {
      clientId,
      redirectUri,
      codeChallenge: url.searchParams.get('code_challenge'),
      codeChallengeMethod: url.searchParams.get('code_challenge_method')
    });

    // Show consent page that auto-approves
    return new Response(consentPageHTML(code, state, redirectUri), {
      headers: { 'Content-Type': 'text/html' }
    });
  }
#+end_src

This would bypass GitHub OAuth entirely for Claude.ai connections while
keeping the GitHub flow for other use cases.

--------------

Generated: 2025-09-15 01:45 UTC
